// Plugins ---------------------------------
plugins {
    id 'application'
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '1.1.2'
}

configurations {
// Other configuration lines might be in here
    javadocCoverage
}

// Repos -----------------------------------
repositories {
    jcenter()
    flatDir {
        dirs '3dImporter'
    }
}

// Dependencies ----------------------------
dependencies {
    testCompile 'junit:junit:4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.18.3'

    compile 'junit:junit:4.12'
    compile 'org.tinylog:tinylog:1.3.4'
    compile 'info.picocli:picocli:3.0.0-alpha-4'
    compile 'org.reflections:reflections:0.9.11'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'com.interactivemesh.jfx.importer.stl.StlMeshImporter:jimStlMeshImporterJFX'

    javadocCoverage 'com.manoelcampos:javadoc-coverage:1.1.0'
}

// Project Settings-------------------------
group = 'Bordeaux Ink.'
version = rootProject.file('VERSION').text.trim()
sourceCompatibility = 1.8
project.buildDir = 'app/build/'
compileJava.options.fork = true
mainClassName = 'tech.subluminal.main.Subluminal'
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

def description = """
    Project: ${project.name}-
    
    Author(s):  Rik de Graaff,
                Lucas Galery KÃ¤ser,
                Luc Kury,
                David Lengweiler
"""

checkstyle { 
   toolVersion = '8.5'
}

// Source Sets -------------------------------
sourceSets {
    main {
         java {
              srcDir 'app/src/main/java'
              }

        resources {
            srcDirs = ['app/src/main/java', 'src/main/tech.subluminal.resources']
            exclude "**/*.java"

        }
         java.outputDir = file('app/out/main')

    }

    test {
         java {
              srcDir 'app/src/test/java'
              }
         java.outputDir = file('app/out/test')
         }
}

idea {
    module{
        testSourceDirs += project.sourceSets.main.java.srcDirs
        inheritOutputDirs = true
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

// Jar file settings -----------------------
jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest{
        attributes 'Main-Class': 'tech.subluminal.main.Subluminal'
    }
}

// Task settings ---------------------------
javadoc {
    setDestinationDir(file("docs/javadoc"))
}

test {
    reports.html.destination file("app/build/reports/test")
}

jacocoTestReport {
    reports.html.destination file("app/build/reports/coverage")
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*tech/subluminal/client/presentation**'
            ])
        })
    }
}

// task openBrowser(type:Exec) {
//     java.awt.Desktop.desktop.browse rootProject.path+"docs/javadocs/index.html".toURI()
// }

// Define new tasks -------------------------
task "build-cs108"(dependsOn: [jar, test, javadoc]) << {
    println "Building project cs108 named Subluminal. This could take a while..."
    println "Please let me entertain you :-)"
    java.awt.Desktop.desktop.browse "https://www.youtube.com/watch?v=dQw4w9WgXcQ".toURI()
    doVolSet.execute()
}

task doVolSet(type: Exec) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'powershell','Function Set-Speaker($Volume){$wshShell = new-object -com wscript.shell;1..50 | % {$wshShell.SendKeys([char]174)};1..$Volume | % {$wshShell.SendKeys([char]175)}} \n Set-Speaker -Volume 100'
    } else {
        commandLine 'sh','gradle/vol.sh'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task javadocCoverageReport(type: Javadoc, dependsOn: javadoc) {
    source = sourceSets.main.allJava
    destinationDir = file("docs/javadoc")
    options.docletpath = configurations.javadocCoverage.files.asType(List)
    options.doclet = "com.manoelcampos.javadoc.coverage.CoverageDoclet"
}
task javadocJar(type: Jar, dependsOn: javadocCoverageReport) {
    classifier "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}